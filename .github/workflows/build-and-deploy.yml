name: SonarCloud Quality Check and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
      - 'blog-deployment/**'
  workflow_dispatch:

jobs:
  # 第一个job：SonarCloud代码质量检测
  sonarcloud-check:
    runs-on: ubuntu-latest
    name: SonarCloud Code Quality Analysis
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarQube需要完整的git历史

    # Python环境设置
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        cd blog
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage

    # Node.js环境设置
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: blog-frontend/package-lock.json
    
    - name: Install Frontend dependencies
      run: |
        cd blog-frontend
        npm ci

    # 运行测试并生成覆盖率报告
    - name: Run Python Tests
      run: |
        cd blog
        # 如果有测试文件，运行测试
        if [ -f "test_*.py" ] || [ -d "tests/" ]; then
          pytest --cov=. --cov-report=xml --cov-report=html
        else
          echo "No Python tests found, creating dummy coverage report"
          coverage run --source=. -m py_compile *.py
          coverage xml
        fi

    - name: Run Frontend Tests  
      run: |
        cd blog-frontend
        # 如果有测试配置，运行测试
        if [ -f "vitest.config.js" ] || [ -f "jest.config.js" ]; then
          npm run test:coverage || npm run test
        else
          echo "No frontend tests configured"
        fi

    # SonarCloud分析
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 第二个job：构建部署（依赖SonarCloud检测通过）
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: sonarcloud-check  # 依赖SonarCloud检测
    name: Build and Deploy
    permissions:
      contents: read
      packages: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup base images
      run: |
        gh release download v1.0.0-deps --pattern "*.tar" --dir docker-images
        for img in docker-images/*.tar; do
          docker load -i "$img"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    
    - name: Build and push
      run: |
        # 构建并推送
        docker build -t ghcr.io/yu-pengy/blog-backend:latest ./blog
        docker build -t ghcr.io/yu-pengy/blog-frontend:latest ./blog-frontend
        
        docker push ghcr.io/yu-pengy/blog-backend:latest
        docker push ghcr.io/yu-pengy/blog-frontend:latest
        
        echo "构建完成！"
        echo "SonarCloud报告：https://sonarcloud.io/project/overview?id=yu-pengy_blog-project"